---
description: 
globs: 
alwaysApply: false
---
 # 공통 아키텍처 컨벤션

## 1. 헥사고날 아키텍처 기본 구조
- **도메인 계층** (내부 육각형):
  ```
  com.kab.[도메인].domain.model: 핵심 도메인 모델
  com.kab.[도메인].domain.service: 순수 도메인 서비스
  com.kab.[도메인].domain.port: 포트 인터페이스
  ```

- **애플리케이션 계층** (내부 육각형 주변):
  ```
  com.kab.[도메인].application.port.in: 인바운드 포트 (유스케이스)
  com.kab.[도메인].application.port.out: 아웃바운드 포트
  com.kab.[도메인].application.service: 유스케이스 구현체
  ```

- **어댑터 계층** (외부 육각형):
  ```
  com.kab.[도메인].adapter.in.web: 웹 컨트롤러
  com.kab.[도메인].adapter.in.grpc: gRPC 서비스 구현
  com.kab.[도메인].adapter.out.persistence: 데이터베이스 어댑터
  com.kab.[도메인].adapter.out.messaging: 메시징 어댑터
  ```

## 2. DDD 패턴 공통 적용
- **전략적 설계**:
  - 바운디드 컨텍스트: 도메인별 명확한 경계 설정
  - 컨텍스트 맵: 도메인 간 관계 정의
  
- **전술적 설계**:
  - 엔티티: 식별자로 구분되는 객체
  - 값 객체: 불변성을 가진 개념적 요소
  - 애그리거트: 일관성 경계를 공유하는 객체 집합
  - 레포지토리: 애그리거트 영속성 담당
  - 도메인 이벤트: 상태 변경을 나타내는 이벤트
  - 도메인 서비스: 여러 애그리거트에 걸친 로직

## 3. SOLID 원칙 기본 적용
- **단일 책임 원칙 (SRP)**: 각 클래스는 하나의 책임만 가짐
- **개방/폐쇄 원칙 (OCP)**: 확장에는 열려있고 수정에는 닫혀있음
- **리스코프 치환 원칙 (LSP)**: 하위 타입은 상위 타입을 대체할 수 있어야 함
- **인터페이스 분리 원칙 (ISP)**: 클라이언트는 불필요한 메서드에 의존하지 않아야 함
- **의존성 역전 원칙 (DIP)**: 고수준 모듈은 저수준 모듈에 의존하지 않고, 둘 다 추상화에 의존

## 4. 클린 아키텍처 원칙
- 의존성 방향은 외부에서 내부로 (도메인이 중심)
- 유스케이스 중심의 설계
- 외부 의존성 격리로 테스트 용이성 증가
- 프레임워크 독립적인 도메인 로직

## 5. 네이밍 컨벤션
### 5.1 클래스 네이밍
- **도메인 모델**: `[Entity]`, `[ValueObject]` (예: `User`, `Email`)
- **서비스**: `[명사/동사]Service` (예: `AuthService`, `NewsCreationService`)
- **인터페이스/포트**: `[명사]Port`, `[동사]Port` (예: `UserRepositoryPort`, `CreateNewsPort`)
- **어댑터**: `[기술][역할]Adapter` (예: `JpaUserRepositoryAdapter`, `ElasticSearchNewsAdapter`)
- **유스케이스**: `[동사][명사]UseCase` (예: `CreateNewsUseCase`, `AuthenticateUserUseCase`)

### 5.2 메서드 네이밍
- **조회**: `findBy[속성]`, `getBy[속성]` (예: `findById`, `getByUsername`)
- **생성**: `create[엔티티]`, `register[엔티티]` (예: `createNews`, `registerUser`)
- **수정**: `update[엔티티]`, `modify[엔티티]` (예: `updateNews`, `modifyUserProfile`) 
- **삭제**: `delete[엔티티]`, `remove[엔티티]` (예: `deleteNews`, `removeComment`)
- **검증**: `validate[엔티티/값]`, `verify[엔티티/값]` (예: `validateEmail`, `verifyToken`)

### 5.3 변수 네이밍
- **상수**: 대문자와 언더스코어 (예: `MAX_RETRY_COUNT`, `DEFAULT_PAGE_SIZE`)
- **엔티티/값 객체**: 카멜케이스 단수형 (예: `user`, `category`)
- **컬렉션**: 카멜케이스 복수형 (예: `users`, `newsItems`)
- **DTO**: `[명사]Dto` (예: `userDto`, `newsDto`)
- **커맨드/쿼리**: `[동사명사]Command`, `[명사]Query` (예: `createUserCommand`, `newsSearchQuery`)

## 6. 최적화 전략 및 규칙 준수 방법
### 6.1 아키텍처 경계 강화
- **계층 간 의존성 방향 준수**: 내부 도메인 → 외부 인프라
- **DTO 변환 위치 명확화**: 어댑터 계층에서 도메인 모델과 DTO 간 변환
- **아키텍처 검증 자동화**: ArchUnit 테스트로 의존성 규칙 검증

### 6.2 도메인 모델 최적화
- **풍부한 도메인 모델**: 비즈니스 로직은 도메인 모델에 캡슐화
- **불변성 강화**: 값 객체는 불변으로 설계, 부작용 최소화
- **유효성 검증 내재화**: 도메인 객체가 자신의 유효성 검증

### 6.3 성능 최적화
- **비동기 논블로킹 패턴**: Java 21 가상 스레드 활용
- **캐싱 전략**: 읽기 전용 데이터 캐싱, 적절한 캐시 무효화
- **데이터베이스 접근 최적화**: 인덱스, 페이징, 배치 처리

### 6.4 회복성 패턴
- **서킷 브레이커**: 외부 시스템 장애 격리
- **재시도 메커니즘**: 일시적 장애 극복
- **타임아웃 관리**: 응답 지연으로 인한 장애 방지
- **벌크헤드 패턴**: 장애 전파 방지

### 6.5 보안 강화
- **깊이 있는 방어**: 여러 계층의 보안 검증
- **최소 권한 원칙**: 필요한 권한만 부여
- **입력 검증**: 모든 외부 입력 철저히 검증
- **보안 컨텍스트 전파**: 마이크로서비스 간 인증 정보 전달

## 7. 테스트 전략
### 7.1 테스트 유형
- **단위 테스트**: `*Test.java` - 도메인 로직, 유스케이스 검증
- **통합 테스트**: `*IntegrationTest.java` - 어댑터, 외부 시스템 연동 검증
- **아키텍처 테스트**: `*ArchitectureTest.java` - 아키텍처 규칙 준수 검증
- **성능 테스트**: `*PerformanceTest.java` - 성능 요구사항 검증
- **장애 주입 테스트**: `*ResilienceTest.java` - 회복성 패턴 검증

### 7.2 테스트 원칙
- **테스트 피라미드**: 단위 테스트 > 통합 테스트 > E2E 테스트
- **독립성**: 각 테스트는 독립적으로 실행 가능
- **결정론**: 동일한 조건에서 항상 동일한 결과
- **자가 검증**: 테스트는 자동으로 성공/실패 판단

### 7.3 테스트 더블 활용
- **Mock**: 외부 의존성의 동작 시뮬레이션
- **Stub**: 테스트에 필요한 응답 제공
- **Spy**: 메서드 호출 기록
- **Fake**: 경량화된 구현체 (인메모리 DB 등)

## 8. Java 21 기능 활용
### 8.1 가상 스레드 활용
- **고성능 병렬 처리**: I/O 집약적 작업 최적화
- **활용 영역**: 비동기 API 호출, 파일 처리, 메시징

### 8.2 패턴 매칭
- **조건 분기 단순화**: 복잡한 타입 검사 및 분기 로직 개선
- **활용 영역**: 메시지 처리, 이벤트 핸들링, 라우팅 로직

### 8.3 레코드 패턴
- **불변 데이터 모델링**: DTO, 값 객체, 이벤트
- **활용 영역**: API 응답 모델, 도메인 이벤트, 설정 객체

### 8.4 문자열 템플릿
- **가독성 높은 문자열 조합**: 로깅, 메시지 생성
- **활용 영역**: 에러 메시지, 로그 포맷, API 응답 메시지

### 8.5 스코프 값
- **컨텍스트 전파**: 요청 추적, 사용자 컨텍스트
- **활용 영역**: 로깅 MDC, 사용자 인증 정보, 트랜잭션 컨텍스트

## 9. 마이크로서비스 통합 전략
### 9.1 서비스 간 통신 패턴
- **동기식 통신**: REST, gRPC
- **비동기식 통신**: 이벤트 기반 아키텍처, 메시지 큐
- **통신 오류 처리**: 타임아웃, 재시도, 서킷 브레이커

### 9.2 분산 데이터 관리
- **데이터 일관성 전략**: Saga 패턴, 이벤트 소싱
- **분산 트랜잭션 처리**: 2단계 커밋, 보상 트랜잭션
- **쿼리 최적화**: CQRS, 데이터 복제, 캐싱

### 9.3 서비스 통합 테스트
- **컨슈머 주도 계약 테스트**: Pact, Spring Cloud Contract
- **통합 지점 테스트**: API 게이트웨이, 서비스 간 통신
- **E2E 테스트 전략**: 주요 사용자 시나리오 커버리지

## 10. 지속적인 개선 및 모니터링
### 10.1 애플리케이션 모니터링
- **메트릭 수집**: Micrometer, Prometheus
- **로깅 전략**: 구조화된 로깅, 분산 추적(Zipkin, Jaeger)
- **알림 체계**: 중요 이벤트 및 임계치 알림

### 10.2 성능 분석 및 개선
- **성능 병목 식별**: 프로파일링, 부하 테스트
- **리소스 사용 최적화**: CPU, 메모리, 디스크 I/O
- **응답 시간 개선**: 캐싱, 인덱싱, 병렬 처리

### 10.3 코드 품질 관리
- **정적 코드 분석**: SonarQube, SpotBugs
- **코드 리뷰 프로세스**: 아키텍처 규칙 체크리스트
- **기술 부채 관리**: 리팩토링 전략, 코드 복잡도 관리

## 11. 신뢰할 수 있는 홈페이지
- [Spring Framework 공식 문서](https://docs.spring.io/spring-framework/reference/index.html)
- [마틴 파울러 블로그](https://martinfowler.com/)
- [Java 21 공식 문서](https://docs.oracle.com/en/java/javase/21/)
- [Baeldung Spring 가이드](https://www.baeldung.com/)
- [InfoQ 아키텍처 아티클](https://www.infoq.com/architecture-design/)
- [OWASP 보안 체크리스트](https://cheatsheetseries.owasp.org/)