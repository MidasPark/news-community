---
description: 
globs: 
alwaysApply: false
---
# Gateway 도메인 컨벤션

> 참고: 이 문서는 모든 도메인에 공통적으로 적용되는 [공통 아키텍처 컨벤션](/.cursor/rules/common-conventions.mdc)을 기반으로 합니다.

## 패키지 구조
- `com.kab.gateway.config`: 게이트웨이 설정
- `com.kab.gateway.filter`: 필터 및 인터셉터
- `com.kab.gateway.handler`: 예외 처리 및 핸들러
- `com.kab.gateway.route`: 라우팅 설정

## DDD 패턴 적용 - Gateway 도메인 특화
- **전략적 설계**:
  - 바운디드 컨텍스트: 게이트웨이는 API 관문 컨텍스트
  - 컨텍스트 맵: 다른 마이크로서비스와의 관계 (Customer, Conformist)
  
- **전술적 설계**:
  - 값 객체: `Route`, `ApiKey`, `RateLimitRule`
  - 엔티티: `RouteConfiguration`, `ApiClient`
  - 애그리거트: `GatewayRoute`를 중심으로 하는 설정
  - 도메인 이벤트: `RouteConfigChanged`, `RateLimitExceeded`
  - 정책 패턴: `LoadBalancingPolicy`, `CircuitBreakerPolicy`

## SOLID 원칙 - Gateway 도메인 특화 적용
게이트웨이는 다른 서비스와의 통합 지점이므로 확장성과 유연성을 위해 SOLID 원칙이 특히 중요합니다.

### 단일 책임 원칙 (Single Responsibility Principle)
- 각 필터는 하나의 책임만 수행 (인증, 로깅, 캐싱 등)
- 라우팅, 로드밸런싱, 서킷브레이킹 로직 분리
- 각 서비스 클라이언트는 하나의 서비스에만 집중
- 구현 예시:
  ```java
  // 각각 하나의 책임을 가진 필터들
  public class AuthenticationFilter implements Filter { /* 인증만 담당 */ }
  public class LoggingFilter implements Filter { /* 로깅만 담당 */ }
  public class RateLimitingFilter implements Filter { /* 속도 제한만 담당 */ }
  ```

### 개방/폐쇄 원칙 (Open/Closed Principle)
- 새로운 라우팅 규칙 추가에 열린 구조
- 필터 체인에 새 필터 추가 용이
- 로드밸런싱 전략 교체 가능
- 구현 예시:
  ```java
  // 확장 가능한 라우팅 구조
  public interface RouteDefinition {
      boolean matches(HttpRequest request);
      ServiceInstance route(HttpRequest request);
  }
  
  // 다양한 라우팅 규칙 구현
  public class PathBasedRouteDefinition implements RouteDefinition { /* 경로 기반 라우팅 */ }
  public class HeaderBasedRouteDefinition implements RouteDefinition { /* 헤더 기반 라우팅 */ }
  public class VersionBasedRouteDefinition implements RouteDefinition { /* 버전 기반 라우팅 */ }
  ```

### 리스코프 치환 원칙 (Liskov Substitution Principle)
- 모든 필터 구현체는 필터 계약 준수
- 다양한 로드밸런서는 동일한 인터페이스로 교체 가능
- 서비스 클라이언트의 일관된 에러 처리
- 구현 예시:
  ```java
  // 모든 로드밸런서는 같은 계약 준수
  public interface LoadBalancer {
      ServiceInstance chooseInstance(List<ServiceInstance> instances, HttpRequest request);
  }
  
  // 교체 가능한 다양한 구현체
  public class RoundRobinLoadBalancer implements LoadBalancer { /* 라운드 로빈 알고리즘 */ }
  public class WeightedLoadBalancer implements LoadBalancer { /* 가중치 기반 알고리즘 */ }
  public class LeastConnectionLoadBalancer implements LoadBalancer { /* 최소 연결 알고리즘 */ }
  ```

### 인터페이스 분리 원칙 (Interface Segregation Principle)
- 필터 유형별 인터페이스 분리 (사전 필터, 라우팅 필터, 사후 필터)
- 서비스 디스커버리와 로드밸런싱 인터페이스 분리
- 모니터링과 알림 인터페이스 분리
- 구현 예시:
  ```java
  // 필터 유형별 분리된 인터페이스
  public interface PreFilter {
      void preProcess(HttpRequest request);
  }
  
  public interface RoutingFilter {
      ServiceInstance route(HttpRequest request);
  }
  
  public interface PostFilter {
      void postProcess(HttpRequest request, HttpResponse response);
  }
  ```

### 의존성 역전 원칙 (Dependency Inversion Principle)
- 라우팅 엔진은 구체적인 서비스 디스커버리에 의존하지 않음
- 필터 체인은 구체적인 필터 구현에 직접 의존하지 않음
- 모든 외부 시스템 연결은 인터페이스를 통해 추상화
- 구현 예시:
  ```java
  // 고수준 라우팅 서비스
  public class RoutingService {
      private final ServiceDiscovery serviceDiscovery;
      private final LoadBalancer loadBalancer;
      private final CircuitBreaker circuitBreaker;
      
      // 인터페이스 기반 DI
      public RoutingService(ServiceDiscovery serviceDiscovery,
                       lancer        CircuitBreaker circuitBre   thiiscoveadBalancer = loadBalancitBreaeaker;
      }
  }
  
  // 인터페이스 정의
  public interface ServiceDiscovery { List<ServiceInstance> getInstances(String serviceId); }
  public interface CircuitBreaker { <T> T execute(Supplier<T> supplier); }
  ```

## 네이밍 컨벤션 - Gateway 도메인 특화
### 클래스
- 필터: `AuthenticationFilter`, `LoggingFilter`
- 설정: `RouteConfig`, `SecurityConfig`
- 핸들러: `GlobalExceptionHandler`, `ErrorHandler`
- 라우터: `AuthRouter`, `BoardRouter`
- 포트: `RoutingPort`, `ServiceDiscoveryPort`
- 어댑터: `SpringCloudGatewayAdapter`, `EurekaServiceDiscoveryAdapter`

### 메서드
- 필터: `filter`, `shouldFilter`
- 설정: `configure`, `routeBuilder`
- 핸들러: `handle`, `resolve`
- 라우팅: `resolveRoute`, `applyLoadBalancing`

### 변수
- 설정: `routeConfig`, `filterConfig`
- 상수: `MAX_RETRY_COUNT`, `TIMEOUT`
- 경로: `authPath`, `boardPath`
- 정책: `retryPolicy`, `timeoutPolicy`

## 최적화 전략 및 규칙 준수 방법
1. **API 게이트웨이 아키텍처 최적화**:
   - 무상태(Stateless) 설계 원칙 준수
   - 동적 라우팅 구성과 정적 라우팅 구성 분리
   - 캐싱 계층 추가로 반복 호출 최소화

2. **성능 최적화**:
   - 비동기 논블로킹 호출 패턴 사용 (WebFlux, Reactor)
   - 백프레셔(Backpressure) 메커니즘 구현
   - 회로 차단기(Circuit Breaker) 패턴으로 장애 격리

3. **포트 및 어댑터 설계**:
   - 내부 API와 외부 API를 명확히 구분
   - 각 서비스별 전용 클라이언트 어댑터 구현
   - 어댑터 교체 가능성을 고려한 인터페이스 설계

4. **설정 및 관리 최적화**:
   - 중앙화된 설정 저장소 사용 (Spring Cloud Config)
   - 라우팅 규칙의 동적 업데이트 지원
   - 모니터링 및 알림 체계 구축

5. **보안 아키텍처 강화**:
   - 인증 로직과 권한 검증 로직 분리
   - API 키, JWT, OAuth 인증 방식별 어댑터 분리
   - 보안 컨텍스트 전파 메커니즘 구현

## 테스트
- 필터 테스트: `*FilterTest.java`
- 라우트 테스트: `*RouteTest.java`
- 통합 테스트: `*IntegrationTest.java`
- 부하 테스트: `*LoadTest.java`
- 장애 주입 테스트: `*ResilienceTest.java`

## 주요 기능
- 인증/인가 처리
- 요청/응답 변환
- 로깅 및 모니터링
- 에러 처리
- 라우팅
- 부하 분산
- 서킷 브레이커
- 속도 제한(Rate Limiting)

## Gateway 도메인 보완 사항
1. **트래픽 분석 기능**:
   - 실시간 트래픽 모니터링 인터페이스
   - 사용 패턴 분석 및 이상 탐지 메커니즘
   - 서비스 사용량에 따른 자동 스케일링 연동

2. **API 문서 통합**:
   - Swagger/OpenAPI 스펙 자동 수집 및 병합
   - 통합 API 카탈로그 구성
   - 개발자 포털 연동 인터페이스

3. **서비스 메시 통합**:
   - Istio, Linkerd 등 서비스 메시와의 통합 방안
   - 트래픽 분배 및 카나리 배포 지원
   - 서비스 메시 메트릭 수집 및 분석

4. **API 버전 관리 전략**:
   - 다중 버전 API 라우팅 메커니즘
   - API 라이프사이클 관리
   - 점진적인 API 마이그레이션 지원

## Java 21 기준 및 신뢰할 수 있는 정보원
### Java 21 기능 활용
- 코드 생성 및 검색은 **Java 21** 버전을 기준으로 수행
- 다음 Java 21 기능 적극 활용:
  - 가상 스레드(Virtual Threads) - 고성능 병렬 요청 처리
  - 패턴 매칭(Pattern Matching for switch) - 라우팅 규칙 처리
  - 레코드 패턴(Record Patterns) - 설정 및 라우팅 정보 모델링
  - 문자열 템플릿(String Templates) - 로깅 및 오류 메시지
  - 구조적 동시성(Structured Concurrency) - 서비스 간 호출 관리

### API 게이트웨이 관련 신뢰할 수 있는 정보원
1. **공식 문서**:
   - [Spring Cloud Gateway 문서](https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/)
   - [Spring WebFlux 문서](https://docs.spring.io/spring-framework/reference/web/webflux.html)
   - [Resilience4j 문서](https://resilience4j.readme.io/docs)

2. **마이크로서비스 아키텍처 모범 사례**:
   - [마이크로서비스.io](https://microservices.io/patterns/apigateway.html)
   - [넷플릭스 기술 블로그](https://netflixtechblog.com/)
   - [마틴 파울러 - API 게이트웨이 패턴](https://martinfowler.com/articles/gateway-pattern.html)

3. **코드 레퍼런스**:
   - [Spring Cloud 샘플](https://github.com/spring-cloud-samples)
   - [Reactive Stack 예제](https://github.com/spring-projects/spring-boot/tree/main/spring-boot-samples)
   - [Kong API Gateway](https://github.com/Kong/kong)