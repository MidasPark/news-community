---
description: 
globs: 
alwaysApply: false
---
 # Nuxt.js Code Conventions

## 설계 방향 및 원칙
- **핵심 책임**: Nuxt.js를 사용하여 SEO 친화적이고 성능이 뛰어난 웹 애플리케이션을 개발합니다.
- **설계 원칙**: 컴포넌트 기반 아키텍처를 사용하여 재사용성과 유지보수성을 높입니다.
- **기술적 고려사항**: 서버 사이드 렌더링(SSR)과 정적 사이트 생성(SSG)을 활용합니다.
- **사용 시 고려사항**: Nuxt.js의 자동 라우팅과 모듈 시스템을 최대한 활용합니다.

## 반응형 디자인 규칙
- 모든 페이지는 모바일에서 확인할 수 있도록 반응형으로 구현되어야 합니다.
- 뷰포트 메타 태그를 사용하여 모바일 장치에서의 적절한 렌더링을 보장합니다.
- 미디어 쿼리를 사용하여 다양한 화면 크기에 대응합니다:
  - 모바일: 375px ~ 767px
  - 태블릿: 375px ~ 767px
  - 데스크톱: 1024px 이상
- 고정 너비(px) 대신 가급적 상대적 단위(%, rem, em, vw, vh)를 사용합니다.
- 모바일에서는 터치 영역이 최소 44px × 44px 이상이 되도록 합니다.
- 폰트 크기는 모바일에서 최소 16px, 데스크톱에서 최소 14px을 유지합니다.
- 그리드 레이아웃은 `grid-template-columns: repeat(auto-fill, minmax())` 패턴을 사용합니다.

## Code Convention
- 모든 코드에는 한글 주석을 포함하여 작성합니다.
- DRY, KISS, YAGNI, SRP, OCP, LSP, ISP, DIP 원칙을 준수합니다.
- Google Style의 코드 작성 가이드라인을 따릅니다.
- 항상 더 나은 Design Pattern을 고민합니다.
- 컨퍼넌트 생성시 이전에 생성된 비슷한 컨퍼넌트가 있는지 확인하고 있다면 리펙토링 합니다.

## Nuxt.js Specific Conventions
- **파일 구조**: Nuxt.js의 디렉토리 구조를 준수합니다. 예를 들어, `pages`, `components`, `layouts`, `store` 디렉토리를 사용합니다.
- **라우팅**: Nuxt.js의 파일 기반 라우팅을 사용하여 명확하고 직관적인 URL 구조를 유지합니다.
- **상태 관리**: Vuex를 사용하여 중앙 집중식 상태 관리를 구현합니다.
- **비동기 데이터**: `asyncData`와 `fetch` 메소드를 사용하여 비동기 데이터를 처리합니다.
- **SEO 최적화**: `head` 메소드를 사용하여 메타 태그를 설정하고 SEO를 최적화합니다.
- **모듈 사용**: Nuxt.js 모듈을 사용하여 기능을 확장합니다. 예를 들어, `@nuxtjs/axios`, `@nuxtjs/auth` 등을 사용합니다.

## Task Guide
- 작업에 관련된 코드 전반을 확인하여 문제를 명확하게 파악합니다.
- 관련된 코드를 꼼꼼히 검토합니다.
- 최소한의 수정으로 문제를 해결하는 것을 우선시합니다.

# Nuxt 프로젝트 규칙

## 버전 및 코드 스타일

- Nuxt 3 기반 코드만 사용하고 검색합니다. Nuxt 2 코드는 사용하지 않습니다.
- 최신 ECMAScript(ES) 스타일로 코드를 작성합니다:
  - 화살표 함수 `() => {}` 사용
  - `var` 대신 `const`와 `let` 사용
  - 구조 분해 할당 `const { property } = object` 활용
  - 템플릿 리터럴 `` `${variable}` `` 사용
  - 비동기 처리에 async/await 사용
  - 옵셔널 체이닝 `?.`과 널 병합 연산자 `??` 활용
  - 스프레드 연산자 `...` 사용

## 라우팅 구조

- 뉴스 관련 페이지는 `/news/[category]` 형식으로 구성합니다.
  - 예: `/news/economic-trends`, `/news/financial-markets`
  
- 커뮤니티 관련 페이지는 `/community/[category]` 형식으로 구성합니다.
  - 예: `/community/discussion`, `/community/qna`

## 컴포넌트 네이밍

- 컴포넌트 이름은 PascalCase로 작성합니다.
- 폴더 이름은 약어가 아닌 전체 이름을 사용합니다.
  - 예: `NYT` 대신 `NewYorkTimes`

## 코드 스타일

- Vue 컴포넌트는 `<script>`, `<template>`, `<style>` 순으로 작성합니다.
- TypeScript를 사용하여 타입 안전성을 확보합니다.
- 일관된 들여쓰기와 포맷팅을 유지합니다. 

## API 통신 규칙

- 모든 API 통신은 데이터가 없을 때도 오류가 발생하지 않도록 처리해야 합니다.
- API 응답 체크 시 옵셔널 체이닝(`?.`)을 사용하여 안전하게 접근합니다.
- 모든 API 호출은 try-catch 블록으로 감싸서 예외 처리를 합니다.
- 오류 발생 시 사용자에게 친절한 메시지를 제공합니다.
- 가능한 경우 로컬 스토리지 캐싱을 활용하여 API 호출을 최소화합니다. 
- API 통신은 최대한 같은 함수를 사용하여 유지보수가 쉽게 되도록 합니다.
- 공통 함수(예: `fetchNYT`)를 만들어 모든 API 요청에서 일관되게 사용합니다.
- API 응답 형식을 일관성 있게 유지하여 프론트엔드에서 예측 가능하게 처리할 수 있도록 합니다.
- 외부 API 사용 시 데이터 형태를 애플리케이션에 맞게 변환하는 정규화 함수를 공통으로 사용합니다. 

## 뉴스 컨텐츠 규칙

- 모든 뉴스 항목은 다음 5개 섹션 중 하나에 반드시 속해야 합니다:
  - 경제 동향 (economic-trends)
  - 기업과 산업 (business-industry)
  - 금융 시장 (financial-markets)
  - 정책과 규제 (policy-regulation)
  - 국제 경제 (global-economy)
- 뉴스 섹션은 색상 구분과 함께 레이블로 표시하여 사용자가 쉽게 구분할 수 있어야 합니다.

## UI 컴포넌트 규칙

- 모든 이모티콘은 중앙 집중식 이모티콘 스토어(`useEmojiStore`)에서 관리하고 가져와야 합니다.
- 이모티콘 스토어를 사용하여 일관된 이모티콘을 제공하고 나중에 쉽게 변경할 수 있도록 합니다.
- 반응형 요소(좋아요, 댓글 등)의 카운트는 스토어에 저장하여 상태를 유지해야 합니다. 

## 언어 및 로컬라이제이션 규칙

- 사용자 인터페이스의 모든 텍스트는 한글로 표시합니다.
- 날짜 형식은 한국 표준(`ko-KR`)을 사용하여 표시합니다.
- AI 분석 결과 및 주요 콘텐츠는 한글로 제공됩니다.
- 모든 버튼, 레이블, 섹션 제목은 한글로 표시하여 일관성을 유지합니다.
- 다국어 지원 시에는 별도의 i18n 모듈을 사용하여 관리합니다. 